from subprocess import call
from time import localtime, strftime
import os


rule GWAS:
    input: 
        vcf=expand("{outDir}/{{phenIndex}}/sample_adr{{phenIndex}}.txt",outDir=config["output"]),
        phen=expand("{outDir}/{{phenIndex}}/sample_adr{{phenIndex}}.phen",outDir=config["output"]),
    output: 
        expand("{outDir}/{{phenIndex}}/mlOut.csv",outDir=config["output"])
    params:
        logNAME="Run GWAS command." + strftime("%Y-%m-%d.%H-%M-%S", localtime()),
        pyseerRun=os.path.join('src','modules','mlRun','pyseerRun.py'),
        gemmaRun=os.path.join('src','modules','mlRun','gemmaRun.py'),
        gwasModel=config['gwasModel'],
        shellCallFile=os.path.join(config["outDir"],'MlBenchmarker.log'),
    run:
        with open (input.vcf[0],'r') as file:
            adr_vcf=file.readline().strip()
        with open (input.phen[0],'r') as file:
            adr_phen=file.readline().strip()
        if params.gwasModel == 'pyseer':
            callString='%s %s --alpha %s --vcf %s --phen %s --out %s' %('python',params.pyseerRun,config['alpha'],adr_vcf,adr_phen,output[0])  #GEMMA/pyseer
        elif params.gwasModel == 'gemma':
            callString='%s %s --vcf %s --phen %s --out %s' %('python',params.gemmaRun,adr_vcf,adr_phen,output[0])  #GEMMA/pyseer
        #callString='%s %s --matrix %s --phen %s --out %s' %(config['python2_dir'],config['kover_run'],adr_vcf,adr_phen,output[0])  #KOVER
        call('echo "' + str(params.logNAME) + ':\n ' + callString + '\n" >> ' + params.shellCallFile, shell=True)
        call(callString, shell=True)


