from subprocess import call
from time import localtime, strftime
import os
from pathlib import Path


rule mlRun:
    input: 
        sim=expand("{outDir}/{{phenIndex}}/sample_adr{{phenIndex}}.txt",outDir=config["output"]),
        phen=expand("{outDir}/{{phenIndex}}/sample_adr{{phenIndex}}.phen",outDir=config["output"]),
    output: 
        expand("{outDir}/{{phenIndex}}/feature_importance.csv",outDir=config["output"]),
        expand("{outDir}/{{phenIndex}}/cross_validation_score.csv",outDir=config["output"]),
    params:
        mlRun=Path('src','modules','mlRun','mlRun.py'),
        logNAME="Run ML/GWAS tools on simulations." + strftime("%Y-%m-%d.%H-%M-%S", localtime()),
        shellCallFile=Path(str(config["output"]),'MlBenchmarker.log'),
    threads: 16
    run:
        with open (input.sim[0],'r') as file:
            adr_vcf=file.readline().strip()
        with open (input.phen[0],'r') as file:
            adr_phen=file.readline().strip()
        callString='%s %s --mlModel %s --infile %s --phen %s --out %s' %('python',params.mlRun,config['mlModel'],adr_vcf,adr_phen,output[0])  
        #callString='%s %s --matrix %s --phen %s --out %s' %(config['python2_dir'],config['kover_run'],adr_vcf,adr_phen,output[0])  #KOVER
        call('echo "' + str(params.logNAME) + ':\n ' + callString + '\n" >> ' + str(params.shellCallFile), shell=True)
        call(callString, shell=True)