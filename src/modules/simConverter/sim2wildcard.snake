# -*- coding: utf-8 -*-
"""
Created on Fri june 11

@author: Masih
?? ?? ?????? ????? ?????, ???? ??? ?? ????? ???

input:
Matrix of simulation data in .pickle format
Phenotypes across replications in .pickle format (one file per line)
Causal markers across replications in .gcta format (one file per line)
"""

# Used for system calls.
from subprocess import call

# Used for timestamping the log files.
from time import localtime, strftime

#-----------------------------------------------------------------------------------------------------------------------------------------------------
# SNAKEMAKE RULE #
import os

def sim2input(infile):
    with open(infile) as f:
        samples = [sample for sample in f.read().split('\n') if len(sample) > 0]  # we dont want empty lines
        return expand("{sample}", sample=samples)
    
rule sim2wildcard:
    input: 
        sim=sim2input(config["sim"]),
        phen=sim2input(config["phen"]),
        par=sim2input(config["par"]),
    output: 
        sim=expand("{outDir}/{phenIndex}/sample_adr{phenIndex}.txt",outDir=config["outDir"],phenIndex=range(config['phenRep'])),
        phen=expand("{outDir}/{phenIndex}/sample_adr{phenIndex}.phen",outDir=config["outDir"],phenIndex=range(config['phenRep'])),
        par=expand("{outDir}/{phenIndex}/sample_adr{phenIndex}.par",outDir=config["outDir"],phenIndex=range(config['phenRep'])),
    params:
        logNAME="Indexing simulation file address." + strftime("%Y-%m-%d.%H-%M-%S", localtime()),
    run:  
        for file_,adr_ in zip(output.sim,input.sim):
                 with open (file_,'w') as file:
                     file.write(adr_)
        for file_,adr_ in zip(output.phen,input.phen):
                 with open (file_,'w') as file:
                     file.write(adr_)
        for file_,adr_ in zip(output.par,input.par):
                 with open (file_,'w') as file:
                     file.write(adr_)
            
                     